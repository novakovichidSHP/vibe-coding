import json
import random
import time
import os

class PromptGenerator:
    def __init__(self):
        self.project_types = {
            "web": {
                "name": "–í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                "technologies": ["HTML/CSS/JavaScript", "React", "Vue.js", "Angular", "Node.js", "Python Flask/Django", "PHP", "Ruby on Rails"],
                "features": ["–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è", "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", "API", "–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω", "–ü–æ–∏—Å–∫", "–ü–∞–≥–∏–Ω–∞—Ü–∏—è", "–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤", "–ß–∞—Ç", "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"],
                "prompts": [
                    "–°–æ–∑–¥–∞–π {technology} –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å {feature}",
                    "–†–∞–∑—Ä–∞–±–æ—Ç–∞–π –≤–µ–±-—Å–∞–π—Ç –Ω–∞ {technology} —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏ {feature}",
                    "–ü–æ—Å—Ç—Ä–æ–π {technology} –ø—Ä–æ–µ–∫—Ç —Å {feature} –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º UI"
                ]
            },
            "mobile": {
                "name": "–ú–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                "technologies": ["React Native", "Flutter", "Swift (iOS)", "Kotlin (Android)", "Xamarin", "Ionic"],
                "features": ["Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è", "–ö–∞–º–µ—Ä–∞", "–û—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º", "–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏", "–ü–ª–∞—Ç–µ–∂–∏", "–ê–Ω–∏–º–∞—Ü–∏–∏", "–¢–µ–º–Ω–∞—è —Ç–µ–º–∞"],
                "prompts": [
                    "–°–æ–∑–¥–∞–π {technology} –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å {feature}",
                    "–†–∞–∑—Ä–∞–±–æ—Ç–∞–π –º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ {technology} —Å {feature}",
                    "–ü–æ—Å—Ç—Ä–æ–π {technology} –ø—Ä–æ–µ–∫—Ç —Å {feature} –∏ –Ω–∞—Ç–∏–≤–Ω—ã–º UI"
                ]
            },
            "desktop": {
                "name": "–î–µ—Å–∫—Ç–æ–ø–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                "technologies": ["Python (Tkinter/PyQt)", "Electron", "C# WPF", "Java Swing", "C++ Qt", "Rust Tauri"],
                "features": ["–õ–æ–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", "–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", "–ü–µ—á–∞—Ç—å", "–°–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "–ê–≤—Ç–æ–∑–∞–ø—É—Å–∫", "–ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å", "–ü–ª–∞–≥–∏–Ω—ã"],
                "prompts": [
                    "–°–æ–∑–¥–∞–π {technology} –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å {feature}",
                    "–†–∞–∑—Ä–∞–±–æ—Ç–∞–π –¥–µ—Å–∫—Ç–æ–ø–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ {technology} —Å {feature}",
                    "–ü–æ—Å—Ç—Ä–æ–π {technology} –ø—Ä–æ–µ–∫—Ç —Å {feature} –∏ –∫—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ—Å—Ç—å—é"
                ]
            },
            "game": {
                "name": "–ò–≥—Ä–∞",
                "technologies": ["Unity (C#)", "Unreal Engine (C++)", "Godot", "Python (Pygame)", "JavaScript (Phaser)", "C++ (SDL)"],
                "features": ["2D/3D –≥—Ä–∞—Ñ–∏–∫–∞", "–§–∏–∑–∏–∫–∞", "–ó–≤—É–∫", "–ú—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä", "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞", "–ò–ò –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤", "–ß–∞—Å—Ç–∏—Ü—ã", "–ê–Ω–∏–º–∞—Ü–∏–∏"],
                "prompts": [
                    "–°–æ–∑–¥–∞–π {technology} –∏–≥—Ä—É —Å {feature}",
                    "–†–∞–∑—Ä–∞–±–æ—Ç–∞–π –∏–≥—Ä—É –Ω–∞ {technology} —Å {feature}",
                    "–ü–æ—Å—Ç—Ä–æ–π {technology} –ø—Ä–æ–µ–∫—Ç —Å {feature} –∏ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º –≥–µ–π–º–ø–ª–µ–µ–º"
                ]
            },
            "ai": {
                "name": "–ò–ò/–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ",
                "technologies": ["Python (TensorFlow)", "Python (PyTorch)", "Python (Scikit-learn)", "R", "Julia", "JavaScript (TensorFlow.js)"],
                "features": ["–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è", "–†–µ–≥—Ä–µ—Å—Å–∏—è", "–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ", "–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞", "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", "–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö", "–ù–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏"],
                "prompts": [
                    "–°–æ–∑–¥–∞–π {technology} –º–æ–¥–µ–ª—å —Å {feature}",
                    "–†–∞–∑—Ä–∞–±–æ—Ç–∞–π –ò–ò –ø—Ä–æ–µ–∫—Ç –Ω–∞ {technology} —Å {feature}",
                    "–ü–æ—Å—Ç—Ä–æ–π {technology} —Å–∏—Å—Ç–µ–º—É —Å {feature} –∏ –≤—ã—Å–æ–∫–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é"
                ]
            },
            "data": {
                "name": "–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö",
                "technologies": ["Python (Pandas)", "Python (NumPy)", "R", "SQL", "Tableau", "Power BI", "Jupyter Notebooks"],
                "features": ["–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è", "–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑", "–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö", "–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ", "–û—Ç—á–µ—Ç—ã", "–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∞—à–±–æ—Ä–¥—ã"],
                "prompts": [
                    "–°–æ–∑–¥–∞–π {technology} –∞–Ω–∞–ª–∏–∑ —Å {feature}",
                    "–†–∞–∑—Ä–∞–±–æ—Ç–∞–π –ø—Ä–æ–µ–∫—Ç –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ {technology} —Å {feature}",
                    "–ü–æ—Å—Ç—Ä–æ–π {technology} —Å–∏—Å—Ç–µ–º—É —Å {feature} –∏ –∏–Ω—Å–∞–π—Ç–∞–º–∏"
                ]
            }
        }
        
        self.complexity_levels = {
            "beginner": {
                "name": "–ù–∞—á–∏–Ω–∞—é—â–∏–π",
                "description": "–ü—Ä–æ—Å—Ç—ã–µ –ø—Ä–æ–µ–∫—Ç—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –æ—Å–Ω–æ–≤",
                "duration": "1-2 –Ω–µ–¥–µ–ª–∏",
                "team_size": "1 —á–µ–ª–æ–≤–µ–∫"
            },
            "intermediate": {
                "name": "–°—Ä–µ–¥–Ω–∏–π",
                "description": "–ü—Ä–æ–µ–∫—Ç—ã —Å—Ä–µ–¥–Ω–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏",
                "duration": "2-4 –Ω–µ–¥–µ–ª–∏",
                "team_size": "1-2 —á–µ–ª–æ–≤–µ–∫–∞"
            },
            "advanced": {
                "name": "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π",
                "description": "–°–ª–æ–∂–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã —Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º —Ñ—É–Ω–∫—Ü–∏–π",
                "duration": "1-3 –º–µ—Å—è—Ü–∞",
                "team_size": "2-4 —á–µ–ª–æ–≤–µ–∫–∞"
            },
            "expert": {
                "name": "–≠–∫—Å–ø–µ—Ä—Ç",
                "description": "–ö—Ä—É–ø–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è",
                "duration": "3-6 –º–µ—Å—è—Ü–µ–≤",
                "team_size": "4+ —á–µ–ª–æ–≤–µ–∫"
            }
        }
        
        self.additional_features = [
            "–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è",
            "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (SQL/NoSQL)",
            "REST API",
            "–†–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è",
            "–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ",
            "–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ",
            "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
            "CI/CD",
            "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è",
            "–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å",
            "–ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å",
            "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥",
            "–ë—ç–∫–∞–ø—ã",
            "–ú—É–ª—å—Ç–∏—è–∑—ã—á–Ω–æ—Å—Ç—å",
            "–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω"
        ]
    
    def clear_screen(self):
        os.system('cls' if os.name == 'nt' else 'clear')
    
    def print_header(self):
        print("=" * 60)
        print("ü§ñ –ê–í–¢–û –ì–ï–ù–ï–†–ê–¢–û–† –ü–†–û–ú–ü–¢–û–í –î–õ–Ø –†–ê–ó–†–ê–ë–û–¢–ö–ò –ü–†–û–ï–ö–¢–û–í")
        print("=" * 60)
        print()
    
    def print_menu(self):
        print("üìã –ú–ï–ù–Æ:")
        print("1. üéØ –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞")
        print("2. üîß –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
        print("3. üìö –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã –ø—Ä–æ–º–ø—Ç–æ–≤")
        print("4. üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–º–ø—Ç –≤ —Ñ–∞–π–ª")
        print("5. üìñ –°–ø—Ä–∞–≤–∫–∞")
        print("0. üö™ –í—ã—Ö–æ–¥")
        print()
    
    def get_user_choice(self, min_val, max_val, prompt="–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é: "):
        while True:
            try:
                choice = int(input(prompt))
                if min_val <= choice <= max_val:
                    return choice
                else:
                    print(f"‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç {min_val} –¥–æ {max_val}")
            except ValueError:
                print("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
    
    def select_project_type(self):
        print("üéØ –í–´–ë–ï–†–ò–¢–ï –¢–ò–ü –ü–†–û–ï–ö–¢–ê:")
        print()
        
        for i, (key, project) in enumerate(self.project_types.items(), 1):
            print(f"{i}. {project['name']}")
        
        choice = self.get_user_choice(1, len(self.project_types))
        return list(self.project_types.keys())[choice - 1]
    
    def select_technology(self, project_type):
        technologies = self.project_types[project_type]["technologies"]
        
        print(f"üîß –í–´–ë–ï–†–ò–¢–ï –¢–ï–•–ù–û–õ–û–ì–ò–Æ –î–õ–Ø {self.project_types[project_type]['name'].upper()}:")
        print()
        
        for i, tech in enumerate(technologies, 1):
            print(f"{i}. {tech}")
        
        print(f"{len(technologies) + 1}. –°–ª—É—á–∞–π–Ω–∞—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è")
        
        choice = self.get_user_choice(1, len(technologies) + 1)
        
        if choice == len(technologies) + 1:
            return random.choice(technologies)
        else:
            return technologies[choice - 1]
    
    def select_features(self, project_type, count=3):
        features = self.project_types[project_type]["features"]
        
        print(f"‚ú® –í–´–ë–ï–†–ò–¢–ï –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò (–≤—ã–±–µ—Ä–∏—Ç–µ {count}):")
        print()
        
        for i, feature in enumerate(features, 1):
            print(f"{i}. {feature}")
        
        selected_features = []
        for i in range(count):
            while True:
                choice = self.get_user_choice(1, len(features), f"–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é {i+1}: ")
                feature = features[choice - 1]
                if feature not in selected_features:
                    selected_features.append(feature)
                    break
                else:
                    print("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞")
        
        return selected_features
    
    def select_complexity(self):
        print("üìä –í–´–ë–ï–†–ò–¢–ï –£–†–û–í–ï–ù–¨ –°–õ–û–ñ–ù–û–°–¢–ò:")
        print()
        
        for i, (key, level) in enumerate(self.complexity_levels.items(), 1):
            print(f"{i}. {level['name']} - {level['description']}")
            print(f"   ‚è±Ô∏è  –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {level['duration']}")
            print(f"   üë• –ö–æ–º–∞–Ω–¥–∞: {level['team_size']}")
            print()
        
        choice = self.get_user_choice(1, len(self.complexity_levels))
        return list(self.complexity_levels.keys())[choice - 1]
    
    def select_additional_features(self):
        print("üîß –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò:")
        print("0. –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
        print()
        
        for i, feature in enumerate(self.additional_features, 1):
            print(f"{i}. {feature}")
        
        choice = self.get_user_choice(0, len(self.additional_features))
        
        if choice == 0:
            return []
        else:
            return [self.additional_features[choice - 1]]
    
    def generate_prompt(self, project_type, technology, features, complexity, additional_features=None):
        project_info = self.project_types[project_type]
        complexity_info = self.complexity_levels[complexity]
        
        # –í—ã–±–æ—Ä –±–∞–∑–æ–≤–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
        base_prompt = random.choice(project_info["prompts"])
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
        main_features = ", ".join(features)
        prompt = base_prompt.format(technology=technology, feature=main_features)
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        prompt += f"\n\nüìä –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: {complexity_info['name']}"
        prompt += f"\n‚è±Ô∏è  –û–∂–∏–¥–∞–µ–º–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {complexity_info['duration']}"
        prompt += f"\nüë• –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–∞–∑–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã: {complexity_info['team_size']}"
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
        if additional_features:
            prompt += f"\nüîß –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: {', '.join(additional_features)}"
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
        prompt += f"\n\nüìã –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø:"
        prompt += f"\n‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π {technology}"
        prompt += f"\n‚Ä¢ –†–µ–∞–ª–∏–∑—É–π —Ñ—É–Ω–∫—Ü–∏–∏: {main_features}"
        prompt += f"\n‚Ä¢ –°–ª–µ–¥—É–π –ª—É—á—à–∏–º –ø—Ä–∞–∫—Ç–∏–∫–∞–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"
        prompt += f"\n‚Ä¢ –î–æ–±–∞–≤—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –∫–æ–¥—É"
        prompt += f"\n‚Ä¢ –°–æ–∑–¥–∞–π README —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏"
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç—Ç–∞–ø–æ–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        prompt += f"\n\nüöÄ –≠–¢–ê–ü–´ –†–ê–ó–†–ê–ë–û–¢–ö–ò:"
        prompt += f"\n1. –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞"
        prompt += f"\n2. –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã"
        prompt += f"\n3. –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"
        prompt += f"\n4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ª–∞–¥–∫–∞"
        prompt += f"\n5. –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ"
        
        return prompt
    
    def save_prompt_to_file(self, prompt, filename=None):
        if filename is None:
            timestamp = time.strftime("%Y%m%d_%H%M%S")
            filename = f"prompt_{timestamp}.txt"
        
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                f.write(prompt)
            print(f"‚úÖ –ü—Ä–æ–º–ø—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {filename}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")
    
    def show_examples(self):
        print("üìö –ü–†–ò–ú–ï–†–´ –ü–†–û–ú–ü–¢–û–í:")
        print("=" * 60)
        print()
        
        examples = [
            {
                "title": "–í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                "prompt": "–°–æ–∑–¥–∞–π React –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π, –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∏ API\n\nüìä –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: –°—Ä–µ–¥–Ω–∏–π\n‚è±Ô∏è –û–∂–∏–¥–∞–µ–º–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 2-4 –Ω–µ–¥–µ–ª–∏\nüë• –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–∞–∑–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã: 1-2 —á–µ–ª–æ–≤–µ–∫–∞"
            },
            {
                "title": "–ú–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                "prompt": "–†–∞–∑—Ä–∞–±–æ—Ç–∞–π Flutter –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π –∏ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏\n\nüìä –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π\n‚è±Ô∏è –û–∂–∏–¥–∞–µ–º–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 1-3 –º–µ—Å—è—Ü–∞\nüë• –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–∞–∑–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã: 2-4 —á–µ–ª–æ–≤–µ–∫–∞"
            },
            {
                "title": "–ò–ò –ø—Ä–æ–µ–∫—Ç",
                "prompt": "–ü–æ—Å—Ç—Ä–æ–π Python (TensorFlow) —Å–∏—Å—Ç–µ–º—É —Å –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–º –∑—Ä–µ–Ω–∏–µ–º –∏ –≤—ã—Å–æ–∫–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é\n\nüìä –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: –≠–∫—Å–ø–µ—Ä—Ç\n‚è±Ô∏è –û–∂–∏–¥–∞–µ–º–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 3-6 –º–µ—Å—è—Ü–µ–≤\nüë• –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–∞–∑–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã: 4+ —á–µ–ª–æ–≤–µ–∫"
            }
        ]
        
        for i, example in enumerate(examples, 1):
            print(f"{i}. {example['title']}")
            print(f"   {example['prompt']}")
            print()
        
        input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    def show_help(self):
        print("üìñ –°–ü–†–ê–í–ö–ê:")
        print("=" * 60)
        print()
        print("üéØ –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä:")
        print("1. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–µ–∫—Ç–∞ (–≤–µ–±, –º–æ–±–∏–ª—å–Ω–æ–µ, –¥–µ—Å–∫—Ç–æ–ø–Ω–æ–µ –∏ —Ç.–¥.)")
        print("2. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—é —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏")
        print("3. –í—ã–±–µ—Ä–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞")
        print("4. –í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏")
        print("5. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–æ–±–∞–≤—å—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏")
        print("6. –ü–æ–ª—É—á–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏")
        print()
        print("üí° –°–æ–≤–µ—Ç—ã:")
        print("‚Ä¢ –ù–∞—á–∏–Ω–∞–π—Ç–µ —Å –ø—Ä–æ—Å—Ç—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –æ—Å–Ω–æ–≤")
        print("‚Ä¢ –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–π—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å")
        print("‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è –±—É–¥—É—â–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤")
        print("‚Ä¢ –ê–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ –ø—Ä–æ–º–ø—Ç—ã –ø–æ–¥ —Å–≤–æ–∏ –Ω—É–∂–¥—ã")
        print()
        input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    def create_project_prompt(self):
        self.clear_screen()
        self.print_header()
        
        print("üéØ –°–û–ó–î–ê–ù–ò–ï –ü–†–û–ú–ü–¢–ê –î–õ–Ø –ü–†–û–ï–ö–¢–ê")
        print("-" * 40)
        print()
        
        # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –ø—Ä–æ–µ–∫—Ç–∞
        project_type = self.select_project_type()
        print()
        
        # –í—ã–±–æ—Ä —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
        technology = self.select_technology(project_type)
        print()
        
        # –í—ã–±–æ—Ä —Ñ—É–Ω–∫—Ü–∏–π
        features = self.select_features(project_type)
        print()
        
        # –í—ã–±–æ—Ä —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        complexity = self.select_complexity()
        print()
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        additional_features = self.select_additional_features()
        print()
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–∞
        prompt = self.generate_prompt(project_type, technology, features, complexity, additional_features)
        
        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        self.clear_screen()
        self.print_header()
        print("üéâ –ì–û–¢–û–í–´–ô –ü–†–û–ú–ü–¢:")
        print("=" * 60)
        print(prompt)
        print("=" * 60)
        print()
        
        # –û–ø—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        print("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–º–ø—Ç –≤ —Ñ–∞–π–ª? (y/n): ", end="")
        save_choice = input().lower()
        if save_choice in ['y', 'yes', '–¥–∞', '–¥']:
            self.save_prompt_to_file(prompt)
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    def run(self):
        while True:
            self.clear_screen()
            self.print_header()
            self.print_menu()
            
            choice = self.get_user_choice(0, 5)
            
            if choice == 0:
                print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            elif choice == 1:
                self.create_project_prompt()
            elif choice == 2:
                print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã")
                input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            elif choice == 3:
                self.show_examples()
            elif choice == 4:
                print("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞")
                print("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–º–ø—Ç —á–µ—Ä–µ–∑ –æ–ø—Ü–∏—é 1")
                input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            elif choice == 5:
                self.show_help()

if __name__ == "__main__":
    generator = PromptGenerator()
    generator.run() 